{"version":3,"sources":["firebase.js","components/CreateAppointment/CreateAppointment.js","App.js","reportWebVitals.js","index.js"],"names":["db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","useStyles","makeStyles","theme","timeButton","background","boxShadow","timeButtonSelected","color","CreateAppointment","classes","initialAvailableTimes","id","time","open","todaysDate","Date","useState","datePickerDate","setDatePickerDate","timeId","setTimeId","name","setName","email","setEmail","getFullYear","getMonth","getDate","date","setDate","setTime","availableTimes","appointments","setAppointments","loadedAppointments","setLoadedAppointments","changedDate","setChangedDate","selectedTime","setSelectedTime","booked","setBooked","createAppointment","a","console","log","addDoc","collection","docRef","error","checkAvailability","resetAvailableTimes","map","item","t","getAppointments","getDocs","forEach","doc","result","data","useEffect","className","TextField","label","onChange","val","target","value","locale","svLocale","utils","DateFnsUtils","Grid","container","justifyContent","variant","margin","newDate","formattedDate","KeyboardButtonProps","spacing","xs","available","Button","onClick","size","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c60231e8.chunk.js","sourcesContent":["\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore, collection, addDoc } from \"firebase/firestore\";\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyADhcMRxq-5DLqp8cTp0-sk1S3_CPr4iS4\",\r\n  authDomain: \"appointments-1f6f1.firebaseapp.com\",\r\n  projectId: \"appointments-1f6f1\",\r\n  storageBucket: \"appointments-1f6f1.appspot.com\",\r\n  messagingSenderId: \"109993046907\",\r\n  appId: \"1:109993046907:web:8b68d614c8f105bf8783de\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore();\r\n\r\n\r\n\r\nexport {app, db}\r\n","import React, {useState, useEffect } from 'react'\r\nimport {db} from '../../firebase'\r\nimport { collection, addDoc, doc, getDocs } from \"firebase/firestore\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport 'date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport svLocale from 'date-fns/locale/sv'\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './CreateAppointmentStyles.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  timeButton: {\r\n    background: \"rgba(6, 177, 28, 0.3)\",\r\n    \"&:hover\": {\r\n      background: 'rgba(6, 177, 28, 0.5)',\r\n      boxShadow: '0 3px 5px 2px rgba(6, 177, 28, 0.3)',\r\n    },\r\n  },\r\n  timeButtonSelected: {\r\n    background: \"rgba(6, 177, 28, 0.9)\",\r\n    color: 'white',\r\n    \"&:hover\": {\r\n      background: 'rgba(6, 177, 28, 0.8)',\r\n      boxShadow: '0 3px 5px 2px rgba(6, 177, 28, 0.3)',\r\n    }\r\n  },\r\n}));\r\n\r\nconst CreateAppointment = () => {\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  const initialAvailableTimes = [\r\n    {\r\n      id: 0,\r\n      time: '09:00-09:30',\r\n      open: true,\r\n    },\r\n    {\r\n      id: 1,\r\n      time: '09:30-10:00',\r\n      open: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      time: '10:00-10:30',\r\n      open: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      time: '10:30-11:00',\r\n      open: true,\r\n    },\r\n    {\r\n      id: 4,\r\n      time: '11:30-12:00',\r\n      open: true,\r\n    },\r\n    {\r\n      id: 5,\r\n      time: '13:00-13:30',\r\n      open: true,\r\n    },\r\n    {\r\n      id: 6,\r\n      time: '14:00-14:30',\r\n      open: true,\r\n    },\r\n    {\r\n      id: 7,\r\n      time: '15:00-15:30',\r\n      open: true,\r\n    },\r\n    {\r\n      id: 8,\r\n      time: '15:30-16:00',\r\n      open: true,\r\n    },\r\n  ];\r\n    \r\n    const todaysDate = new Date();\r\n    // Holds date in datepicker for visuals\r\n    const [datePickerDate, setDatePickerDate] = useState(todaysDate);\r\n    \r\n    const [timeId, setTimeId] = useState();\r\n    const [name, setName] = useState();\r\n    const [email, setEmail] = useState(); \r\n    const [date, setDate] = useState(`${todaysDate.getFullYear()}-${todaysDate.getMonth() + 1}-${todaysDate.getDate()}`); \r\n    const [time, setTime] = useState();\r\n    \r\n    const [availableTimes, setAvailableTimes] = useState(() => initialAvailableTimes);\r\n    const [appointments, setAppointments] = useState([]);\r\n    // Used to call re-renders\r\n    const [loadedAppointments, setLoadedAppointments] = useState(false);\r\n    const [changedDate, setChangedDate] = useState(false);\r\n    \r\n    const [selectedTime, setSelectedTime] = useState('');\r\n    \r\n    const [booked, setBooked] = useState(false);\r\n\r\n    const createAppointment = async () => {\r\n        console.log('Bokar tid...');\r\n\r\n        try {\r\n            const docRef = await addDoc(collection(db, \"appointments\"), {\r\n              id: timeId,\r\n              name: name,\r\n              email: email,\r\n              date: date,\r\n              time: time,\r\n            });\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n            setBooked(true);\r\n          } catch (e) {\r\n            console.error(\"Error adding document: \", e);\r\n          }\r\n    }\r\n\r\n\r\n    const getName = (val) => {\r\n        setName(val.target.value);\r\n    }\r\n    const getEmail = (val) => {\r\n        setEmail(val.target.value);\r\n    }\r\n    const handleDateChange = (newDate) => {\r\n      const formattedDate = `${newDate.getFullYear()}-${newDate.getMonth() + 1}-${newDate.getDate()}`;\r\n      // Store the formatted date\r\n      setDate(formattedDate);\r\n\r\n      // Just for holding the data on the date picker (visual)\r\n      setDatePickerDate(newDate);\r\n  \r\n      setChangedDate(true);\r\n\r\n      console.log('new date picked');\r\n    };\r\n    const getTime = (val, id) => {\r\n      setTime(val);\r\n      setTimeId(id);\r\n      setSelectedTime(val);\r\n    }\r\n\r\n    const checkAvailability = async () => {\r\n      // Om de ska gå boka 1 timme\r\n      // Ny array med 1h tider\r\n      // Bool som kollar om man ska boka 30 eller 60min\r\n      // Visar array med 1timme tider (bara visual, ändrar inte open bool här)\r\n      // Då måste check availability kolla så att 2 30min tider är lediga bredvid varandra med hjälp av id\r\n      // När man bokar 1h tid, så sätts de två 30min tiderna till open = false\r\n      \r\n      \r\n      // Set all times to open\r\n      resetAvailableTimes();\r\n\r\n      console.log('Kollar lediga tider...');\r\n\r\n      appointments.map((item) => {\r\n        // Compare dates from database\r\n        if(item.date == date){\r\n          availableTimes.map((t) => {\r\n            // Compare times from database\r\n            if(item.id == t.id){\r\n              // Set time as booked \r\n              t.open = false;\r\n              \r\n              // For hour appointments\r\n              //if(availableTimes[t.id + 1] == true)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n    const getAppointments = async () => {\r\n      // Reset appointments\r\n      setAppointments([]);\r\n\r\n      setLoadedAppointments(false);\r\n      \r\n      const querySnapshot = await getDocs(collection(db, \"appointments\"));\r\n      querySnapshot.forEach((doc) => {\r\n          var result = doc.data();\r\n          setAppointments(appointments => [...appointments, {\r\n              id: result.id,\r\n              name: result.name,\r\n              email: result.email,\r\n              date: result.date,\r\n              time: result.time\r\n          }]);\r\n      });\r\n      setLoadedAppointments(true);\r\n  }\r\n  // Load appointments\r\n    useEffect(() => {\r\n      getAppointments();\r\n    }, [])\r\n    // Check if available on first load\r\n    useEffect(() => {\r\n      if(loadedAppointments){\r\n        checkAvailability();\r\n        // Used to force a re-render so times shows as booked\r\n        setLoadedAppointments(false);\r\n      }\r\n    }, [loadedAppointments])\r\n    // Check if avialable when changing dates\r\n    useEffect(() => {\r\n      if(changedDate){\r\n        checkAvailability();\r\n        // Used to force a re-render so times shows as booked\r\n\r\n        setChangedDate(false);\r\n      }\r\n    }, [date])\r\n\r\n\r\nconst resetAvailableTimes = () => {\r\n  // Reset times for a new date\r\n  availableTimes.map((t) => {\r\n    // Set time as open\r\n    t.open = true;\r\n  });\r\n}\r\n\r\n\r\n    return (\r\n      \r\n    <section className=\"section\" id=\"appointment\">\r\n      <div className=\"section-divider\" />\r\n            <br />\r\n            <br />\r\n      <div className=\"container\">\r\n        <h1>Boka tid</h1>\r\n          <div className=\"input-container\">\r\n          <TextField id=\"standard-basic\" label=\"Namn\" onChange={getName} />\r\n          <TextField id=\"standard-basic\" label=\"E-post\" onChange={getEmail} />\r\n\r\n            <MuiPickersUtilsProvider locale={svLocale} utils={DateFnsUtils}>\r\n      <Grid container justifyContent=\"space-around\">\r\n        <KeyboardDatePicker\r\n          //disableToolbar\r\n          variant=\"inline\"\r\n          //format=\"yyyy-mm-dd\"\r\n          margin=\"normal\"\r\n          id=\"date-picker-inline\"\r\n          label=\"Välj datum\"\r\n          value={datePickerDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n   \r\n    {!booked ? <h3>Boka tid: {selectedTime}</h3>\r\n    : <h3>Bokning genomförd! <br/>\r\n       Datum: {date} <br/>\r\n       Tid: {selectedTime} </h3>\r\n    }\r\n    <div className=\"times-div\">\r\n    \r\n\r\n    <Grid container className=\"available-times\" spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Grid container justifyContent=\"center\" spacing={1}>\r\n          {availableTimes.map((available) => (\r\n            <Grid key={available.id} item>\r\n              { available.open ? <Button className={classes.timeButton} onClick={() => getTime(available.time, available.id)} variant=\"contained\" size=\"small\" /*color=\"primary\"*/ >{available.time}</Button>\r\n              : <Button variant=\"contained\" size=\"small\" disabled >{available.time}</Button>  }\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n      </Grid>\r\n      </div>\r\n      <div>  \r\n      <Button className=\"submit-btn\" onClick={createAppointment} variant=\"contained\" size=\"large\" color=\"primary\" >Boka tid</Button>\r\n      </div>   \r\n    </div>  \r\n  </div>\r\n</section>\r\n    )\r\n}\r\n\r\nexport default CreateAppointment\r\n\r\n\r\n/*\r\ntry {\r\n            const docRef = await addDoc(collection(db, \"users\"), {\r\n              first: \"Ada\",\r\n              last: \"Lovelace\",\r\n              born: 1815\r\n            });\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n          } catch (e) {\r\n            console.error(\"Error adding document: \", e);\r\n          }\r\n*/","\nimport CreateAppointments from'./components/CreateAppointment/CreateAppointment';\nimport GetAppointments from'./components/GetAppointments';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <CreateAppointments />\n\n      {/*<GetAppointments /> */}\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}